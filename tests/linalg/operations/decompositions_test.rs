use rstest::rstest;
use arr_rs::prelude::*;

#[rstest(
array, expected,
case(array_arange!(f64, 1., 4.).reshape(&[2, 2]), Ok(QrData {
q: array!(f64, [[0.31622776601683794, 0.9486832980505142], [0.9486832980505138, -0.3162277660168369]]).unwrap(),
r: array!(f64, [[3.162277660168379, 4.427188724235731], [3.552713678800501e-15, 0.6324555320336809]]).unwrap(),
} )),
case(array_arange!(f64, 1., 9.).reshape(&[3, 3]), Ok(QrData {
q: array!(f64, [[0.12309149097933272, 0.9045340337332908, 0.1111111111111111], [0.4923659639173309, 0.30151134457776335, 0.4444444444444444], [0.8616404368553291, -0.30151134457776435, 0.8888888888888888]]).unwrap(),
r: array!(f64, [[8.12403840463596, 9.601136296387953, 11.078234188139945], [-6.494804694057166e-15, 0.9045340337332837, 1.809068067466573], [8.11111111111111, 9.555555555555555, 11.0]]).unwrap(),
} )),
case(array_arange!(f64, 1., 8.).reshape(&[2, 2, 2]), Ok(QrData {
q: array!(f64, [[[0.31622776601683794, 0.9486832980505142], [0.9486832980505138, -0.3162277660168369]], [[0.5812381937190965, 0.8137334712067354], [0.813733471206735, -0.5812381937190957]]]).unwrap(),
r: array!(f64, [[[3.162277660168379, 4.427188724235731], [3.552713678800501e-15, 0.6324555320336809]], [[8.602325267042627, 9.997296931968458], [6.994405055138486e-15, 0.2324952774876472]]]).unwrap(),
} )),
case(array_arange!(f64, 1., 16.).reshape(&[2, 2, 2, 2]), Ok(QrData {
q: array!(f64, [[[[0.31622776601683794, 0.9486832980505142], [0.9486832980505138, -0.3162277660168369]], [[0.5812381937190965, 0.8137334712067354], [0.813733471206735, -0.5812381937190957]]], [[[0.6332377902572627, 0.7739572992033155], [0.773957299203321, -0.6332377902572696]], [[0.6549305384178419, 0.7556890827898275], [0.7556890827898176, -0.6549305384178304]]]]).unwrap(),
r: array!(f64, [[[[3.162277660168379, 4.427188724235731], [3.552713678800501e-15, 0.6324555320336809]], [[8.602325267042627, 9.997296931968458], [6.994405055138486e-15, 0.2324952774876472]]], [[[14.212670403551895, 15.61986549301248], [-1.2578826869003024e-13, 0.14071950894592034]], [[19.849433241279208, 21.260052862486866], [3.0098146197587994e-13, 0.10075854437229737]]]]).unwrap(),
} )),
case(array!(f64, [[12., -51., 4.], [6., 167., -68.], [-4., 24., -41.]]), Ok(QrData {
q: array!(f64, [[0.8571428571428571, -0.3942857142857143, -0.33142857142857146], [0.42857142857142855, 0.9028571428571428, 0.034285714285714364], [-0.2857142857142857, 0.17142857142857143, -0.9428571428571428]]).unwrap(),
r: array!(f64, [[13.999999999999998, 20.999999999999993, -13.999999999999998], [-2.220446049250313e-16, 175.0, -70.0], [0.0, 1.5987211554602254e-14, 34.99999999999999]]).unwrap(),
} )),
)] fn test_linalg_qr(array: Result<Array<f64>, ArrayError>, expected: QrResult<f64>) {
    assert_eq!(expected, array.qr())
}

#[rstest(
array, expected,
case(array!(f64, [[1., 0.], [0., 1.]]), Ok(SvdData {
u: array!(f64, [[1., 0.], [0., 1.]]).unwrap(),
s: array!(f64, [1., 1.]).unwrap(),
vt: array!(f64, [[1., 0.], [0., 1.]]).unwrap(),
} )),
case(array!(f64, [[[1., 0.], [0., 1.]], [[1., 0.], [0., 1.]]]), Ok(SvdData {
u: array!(f64, [[[1., 0.], [0., 1.]], [[1., 0.], [0., 1.]]]).unwrap(),
s: array!(f64, [[1., 1.], [1., 1.]]).unwrap(),
vt: array!(f64, [[[1., 0.], [0., 1.]], [[1., 0.], [0., 1.]]]).unwrap(),
} )),
case(array!(f64, [[3., 0.], [4., 5.]]), Ok(SvdData {
u: array!(f64, [[0.31795579946111835, 0.9055385138137416], [0.9538673983833564, 2.7166155414412216]]).unwrap(),
s: array!(f64, [6.6717460324828926, 2.342606428329091]).unwrap(),
vt: array!(f64, [[0.7071067811865475, 0.7071067811865475], [0.7071067811865492, 0.7071067811865459]]).unwrap(),
} )),
case(array!(f64, [[12., -51., 4.], [6., 167., -68.], [-4., 24., -41.]]), Ok(SvdData {
u: array!(f64, [[0.03797885577591901, -0.26217425672271544, -2.824930959122882], [0.16427346216363092, 2.1177052813947483, 7.967199219868392], [0.18625330924936484, 0.10622365781020184, 1.0817467472725937]]).unwrap(),
s: array!(f64, [190.5620247357117, 30.89678520133961, 17.734243509331957]).unwrap(),
vt: array!(f64, [[0.009502598125763602, 0.9224562370010904, -0.385984703643355], [-0.21763329724073782, 0.37998761913005324, 0.8990245587524281], [-0.9940004207455216, 0.05238800908425632, 0.09601385348955475]]).unwrap(),
} )),
case(array!(f64, [[3., -1., 8.], [4., 7., -5.], [-9., 2., -6.]]), Ok(SvdData {
u: array!(f64, [[0.3463702990111775, -0.6423692326639565, -0.7940415004741458], [-0.3029971535417019, -0.4129853980668238, 2.6646594522465588], [-0.4332969222916185, 0.7806134327569747, -0.7514505618420728]]).unwrap(),
s: array!(f64, [12.511331473915467, 10.848261854447053, 3.283565057549689]).unwrap(),
vt: array!(f64, [[0.24787716699613055, -0.6295040050351528, 0.7363977306637186], [-0.3982282611663254, -0.8058362725799526, 0.4382261445907731], [0.3989617326866674, -0.7357392375816646, -0.5472817465752016]]).unwrap(),
} )),
)] fn test_linalg_svd(array: Result<Array<f64>, ArrayError>, expected: SvdResult<f64>) {
    assert_eq!(expected, array.svd())
}
